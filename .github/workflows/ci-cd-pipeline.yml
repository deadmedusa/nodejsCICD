name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: '1.0.0'

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Get Terraform Output
      id: tf_output
      run: |
        # Retry terraform output in case of temporary failures
        for i in {1..5}; do
          EC2_IP=$(terraform output -raw instance_public_ip 2>/dev/null | tr -d '\n')
          if [ -n "$EC2_IP" ]; then
            echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
            break
          else
            echo "Attempt $i: Failed to get EC2_IP. Retrying..."
            sleep 5
          fi
        done

        if [ -z "$EC2_IP" ]; then
          echo "Failed to get EC2_IP after 5 attempts. Exiting."
          exit 1
        fi

    - name: Wait for EC2 SSH Availability
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
        while ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@${{ env.EC2_IP }} 'echo SSH is ready'; do
          echo "Waiting for SSH..."
          sleep 10
        done

    - name: Deploy Node.js app
      run: |
        scp -r . ubuntu@${{ env.EC2_IP }}:/tmp/nodejs-app
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} 'bash -s' < deploy.sh

    # Cleanup step to destroy infrastructure if the job fails
    - name: Terraform Destroy (on failure)
      if: ${{ always() && failure() }}
      run: terraform destroy -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
